{"name":"Dapperlite","tagline":"A Dapper compatible library that works on .NET Compact Framework","body":"DapperLite - a very simple object mapper for .NET, .NET Compact Framework and Mono\r\n==================================================================================\r\n\r\nFeatures\r\n--------\r\nDapperLite is a [single file](https://github.com/ryankirkman/DapperLite/blob/master/DapperLite.NETCF35/SqlMapper.cs) you can drop in to your .NET Compact Framework or .NET project that will extend your IDbConnection interface.\r\n\r\nThis project is a subset and simplification of dapper-dot-net: https://github.com/SamSaffron/dapper-dot-net\r\n\r\nCurrently provides 2 helpers:\r\n\r\nExecute a query and map the results to a strongly typed List\r\n------------------------------------------------------------\r\n\r\n```csharp\r\npublic static IEnumerable<T> Query<T>(this IDbConnection cnn, string sql, object param)\r\n\r\npublic static IEnumerable<T> Query<T>(this IDbConnection conn, string sql)\r\n```\r\n\r\nExample usage:\r\n\r\n```csharp\r\npublic class Dog\r\n{\r\n    public int? Age { get; set; }\r\n    public Guid Id { get; set; }\r\n    public string Name { get; set; }\r\n    public float? Weight { get; set; }\r\n    public string Size { get; set; }\r\n}            \r\n            \r\nvar guid = Guid.NewGuid();\r\nvar dog = connection.Query<Dog>(\"select Age = @Age, Id = @Id\", new { Age = (int?)null, Id = guid });\r\n            \r\ndog.Count()\r\n    .IsEqualTo(1);\r\n\r\ndog.First().Age\r\n    .IsNull();\r\n\r\ndog.First().Id\r\n    .IsEqualTo(guid);\r\n```\r\n\r\nExecute a Command that returns no results\r\n-----------------------------------------\r\n\r\n```csharp\r\npublic static int Execute(this IDbConnection cnn, string sql, object param, IDbTransaction transaction)\r\n\r\npublic static int Execute(this IDbConnection cnn, string sql)\r\n```\r\n\r\nExample usage:\r\n\r\n```csharp\r\nconnection.Execute(@\"\r\n  set nocount on \r\n  create table #t(i int) \r\n  set nocount off \r\n  insert #t \r\n  select @a a union all select @b \r\n  set nocount on \r\n  drop table #t\", new {a=1, b=2 })\r\n   .IsEqualTo(2);\r\n```\r\n\r\n\r\nUsing the Micro-ORM Database.cs class\r\n-------------------------------------\r\n\r\nTo use this Micro-ORM, in addition to [SqlMapper.cs](https://github.com/ryankirkman/DapperLite/blob/master/DapperLite.NETCF35/SqlMapper.cs) you will also need to include [SqlMapperInsertUpdate.cs](https://github.com/ryankirkman/DapperLite/blob/master/DapperLite.NETCF35/SqlMapperInsertUpdate.cs), [Database.cs](https://github.com/ryankirkman/DapperLite/blob/master/DapperLite.NETCF35/Database.cs) and [SqlCeDatabase.cs](https://github.com/ryankirkman/DapperLite/blob/master/DapperLite.NETCF35/SqlCeDatabase.cs). These are all extremely simple files and worth reading if you'd like to modify their functionality.\r\n\r\n```csharp\r\n// Basic constructor.\r\nprotected Database(IDbConnection connection)\r\n\r\n// Provides advanced configuration for the behaviour of the class when Exceptions are encountered.\r\nprotected Database(IDbConnection connection, DapperLiteException exceptionHandler, bool throwExceptions)\r\n\r\npublic T Get<T>(TId id)\r\n\r\npublic T Get<T>(string columnName, object data)\r\n\r\npublic IEnumerable<T> All<T>()\r\n\r\npublic IEnumerable<T> All<T>(string columnName, object data)\r\n\r\npublic virtual void Insert(object obj)\r\n\r\npublic virtual void Update(object obj)\r\n\r\n// Also includes wrapper methods for Query<T>() and Execute() to save typing.\r\n```\r\n\r\n`Database.cs` is an abstract class designed to be extended with SQL version specific implementations. An `SqlCeDatabase` implementation is provided.\r\n\r\nExample usage:\r\n\r\n```csharp\r\nSqlCeConnection conn = new SqlCeConnection(\"Data Source=MyDatabase.sdf\");\r\n\r\n// The type we pass in (Guid) is the type of the Id column that is assumed to be present in every table.\r\nSqlCeDatabase<Guid> db = new SqlCeDatabase<Guid>(conn);\r\n// Calling Init() automatically generates a table name map, used to map type names to table names.\r\n// e.g. for the type \"Dog\", it will first search for a table name == \"Dog\", then (pluralized) \"Dogs\"\r\ndb.Init();\r\n\r\n// Get all Dogs.\r\nIEnumerable<Dog> allDogs = db.All<Dog>();\r\n\r\n// Get all Dogs where Size == \"big\"\r\nIEnumerable<Dog> bigDogs = db.All<Dog>(\"Size\", \"big\");\r\n\r\n// Get a dog by Id\r\nDog myDog = db.Get<Dog>(someGuid);\r\n\r\n// Insert a new Dog\r\nDog newDog = new Dog { Age = 3, Id = Guid.New(), Name = \"Ralph\", Weight = 12.3, Size = \"Small\" };\r\ndb.Insert(newDog);\r\n\r\n// Get the Dog with Name == \"Fido\"\r\nDog yourDog = db.Get<Dog>(\"Name\", \"Fido\");\r\n\r\n// Update a Dog\r\nyourDog.Size = \"Small\";\r\ndb.Update(yourDog);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}